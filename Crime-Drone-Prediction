{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12192206,"sourceType":"datasetVersion","datasetId":7679628}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"!pip install -U scikit-learn==1.3.2 imbalanced-learn==0.11.0","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 1. Import Libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.decomposition import PCA\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import accuracy_score, precision_recall_fscore_support, classification_report, confusion_matrix\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.feature_selection import SelectKBest, f_classif\nfrom sklearn.feature_selection import VarianceThreshold\nfrom collections import Counter\nfrom IPython.display import display, HTML\nimport plotly.io as pio\nfrom imblearn.over_sampling import RandomOverSampler\nfrom imblearn.under_sampling import RandomUnderSampler\nfrom imblearn.pipeline import Pipeline\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T10:58:55.840347Z","iopub.execute_input":"2025-06-19T10:58:55.840865Z","iopub.status.idle":"2025-06-19T10:58:55.848522Z","shell.execute_reply.started":"2025-06-19T10:58:55.840832Z","shell.execute_reply":"2025-06-19T10:58:55.847432Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# 2. Understanding Dataset inforamation","metadata":{}},{"cell_type":"code","source":"crime_data_file = '/kaggle/input/crime-drone-india-2018/Crime Drone India.csv'\ncrime_data = pd.read_csv(crime_data_file)\ncrime_data.info()\nprint(\"----\"*20)\nprint(\"Giá trị thiếu trong mỗi cột:\")\nprint(crime_data.isnull().sum())\nprint(\"----\"*20)\ncrime_data.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T10:58:59.487039Z","iopub.execute_input":"2025-06-19T10:58:59.487425Z","iopub.status.idle":"2025-06-19T10:58:59.557438Z","shell.execute_reply.started":"2025-06-19T10:58:59.487398Z","shell.execute_reply":"2025-06-19T10:58:59.556668Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 2090 entries, 0 to 2089\nData columns (total 9 columns):\n #   Column     Non-Null Count  Dtype  \n---  ------     --------------  -----  \n 0   timestamp  2090 non-null   object \n 1   act379     2090 non-null   int64  \n 2   act13      2090 non-null   int64  \n 3   act279     2090 non-null   int64  \n 4   act323     2090 non-null   int64  \n 5   act363     2090 non-null   int64  \n 6   act302     2090 non-null   int64  \n 7   latitude   2090 non-null   float64\n 8   longitude  2090 non-null   float64\ndtypes: float64(2), int64(6), object(1)\nmemory usage: 147.1+ KB\n--------------------------------------------------------------------------------\nGiá trị thiếu trong mỗi cột:\ntimestamp    0\nact379       0\nact13        0\nact279       0\nact323       0\nact363       0\nact302       0\nlatitude     0\nlongitude    0\ndtype: int64\n--------------------------------------------------------------------------------\n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"          timestamp  act379  act13  act279  act323  act363  act302   latitude  \\\n0  28-02-2018 21:00       1      0       0       0       0       0  22.737260   \n1  28-02-2018 21:15       1      0       0       0       0       0  22.720992   \n2  28-02-2018 10:15       0      0       1       0       0       0  22.736676   \n3  28-02-2018 10:15       0      0       1       0       0       0  22.746527   \n4  28-02-2018 10:30       0      0       1       0       0       0  22.769531   \n\n   longitude  \n0  75.875987  \n1  75.876083  \n2  75.883168  \n3  75.887139  \n4  75.888772  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>timestamp</th>\n      <th>act379</th>\n      <th>act13</th>\n      <th>act279</th>\n      <th>act323</th>\n      <th>act363</th>\n      <th>act302</th>\n      <th>latitude</th>\n      <th>longitude</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>28-02-2018 21:00</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>22.737260</td>\n      <td>75.875987</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>28-02-2018 21:15</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>22.720992</td>\n      <td>75.876083</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>28-02-2018 10:15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>22.736676</td>\n      <td>75.883168</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>28-02-2018 10:15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>22.746527</td>\n      <td>75.887139</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>28-02-2018 10:30</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>22.769531</td>\n      <td>75.888772</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"cols = ['act379', 'act13', 'act279', 'act323', 'act363', 'act302']\nzero_acts = crime_data[(crime_data[cols] == 0).all(axis=1)]\n\nprint(\"Số lượng bản ghi có tất cả các act = 0:\", len(zero_acts))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T10:59:04.097212Z","iopub.execute_input":"2025-06-19T10:59:04.097921Z","iopub.status.idle":"2025-06-19T10:59:04.107922Z","shell.execute_reply.started":"2025-06-19T10:59:04.097893Z","shell.execute_reply":"2025-06-19T10:59:04.107189Z"}},"outputs":[{"name":"stdout","text":"Số lượng bản ghi có tất cả các act = 0: 0\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"# 1. Kiểm tra các giá trị duy nhất trong cột timestamp\nprint(\"Một số giá trị mẫu trong cột timestamp:\")\nprint(crime_data['timestamp'].head(10))\nprint(\"\\nCác giá trị duy nhất (định dạng):\")\nprint(crime_data['timestamp'].unique()[:20])  # In 20 giá trị đầu tiên để kiểm tra","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T10:59:06.464662Z","iopub.execute_input":"2025-06-19T10:59:06.464980Z","iopub.status.idle":"2025-06-19T10:59:06.471762Z","shell.execute_reply.started":"2025-06-19T10:59:06.464959Z","shell.execute_reply":"2025-06-19T10:59:06.470731Z"}},"outputs":[{"name":"stdout","text":"Một số giá trị mẫu trong cột timestamp:\n0    28-02-2018 21:00\n1    28-02-2018 21:15\n2    28-02-2018 10:15\n3    28-02-2018 10:15\n4    28-02-2018 10:30\n5    28-02-2018 14:15\n6    28-02-2018 08:00\n7    28-02-2018 03:30\n8    28-02-2018 01:30\n9    28-02-2018 19:00\nName: timestamp, dtype: object\n\nCác giá trị duy nhất (định dạng):\n['28-02-2018 21:00' '28-02-2018 21:15' '28-02-2018 10:15'\n '28-02-2018 10:30' '28-02-2018 14:15' '28-02-2018 08:00'\n '28-02-2018 03:30' '28-02-2018 01:30' '28-02-2018 19:00'\n '28-02-2018 14:10' '28-02-2018 14:25' '28-02-2018 22:00'\n '28-02-2018 22:10' '28-02-2018 12:00' '28-02-2018 13:30'\n '28-02-2018 03:00' '28-02-2018 23:50' '28-02-2018 11:55'\n '28-02-2018 11:00' '28-02-2018 18:00']\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"# 3. Data Pre-processing & Split train:test data with 7:3","metadata":{}},{"cell_type":"code","source":"crime_data_file = '/kaggle/input/crime-drone-india-2018/Crime Drone India.csv'\ncrime_data = pd.read_csv(crime_data_file)\n# Normalize timestamp column\n# Replace dot (.) with colon (:) and remove spaces\ncrime_data['timestamp'] = crime_data['timestamp'].str.replace(r'\\.(\\d{2})\\s*', r':\\1', regex=True)\n# Replace - with / to match format\ncrime_data['timestamp'] = crime_data['timestamp'].str.replace(r'(\\d{1,2})-(\\d{1,2})-(\\d{4})', r'\\1/\\2/\\3', regex=True)\n\ncrime_data['timestamp'] = pd.to_datetime(crime_data['timestamp'], format='%d/%m/%Y %H:%M', errors='coerce')\n\n# Extract time attributes\ncrime_data['year'] = crime_data['timestamp'].dt.year\ncrime_data['month'] = crime_data['timestamp'].dt.month\ncrime_data['day'] = crime_data['timestamp'].dt.day\ncrime_data['hour'] = crime_data['timestamp'].dt.hour\ncrime_data['dayofyear'] = crime_data['timestamp'].dt.dayofyear\ncrime_data['week'] = crime_data['timestamp'].dt.isocalendar().week\ncrime_data['weekofyear'] = crime_data['timestamp'].dt.isocalendar().week\ncrime_data['dayofweek'] = crime_data['timestamp'].dt.dayofweek\ncrime_data['weekday'] = crime_data['timestamp'].dt.weekday\ncrime_data['quarter'] = crime_data['timestamp'].dt.quarter\n\n# 3. Tạo cột nhãn tội phạm (crime type) để sử dụng làm mục tiêu dự đoán\n# Tạo cột 'crime_type' dựa trên các cột act379, act13, act279, act323, act363, act302\n# Tạo cột nhãn\ncrime_types = ['act379', 'act13', 'act279', 'act323', 'act363', 'act302']\ncrime_mapping = {\n    '379': 'Robbery', '13': 'Gambling', '279': 'Accident',\n    '323': 'Violence', '363': 'Kidnapping', '302': 'Murder'\n}\n\ndef assign_crime_type(row):\n    max_act = row[crime_types].max()\n    if max_act == 1:\n        act_code = row[crime_types].idxmax().replace('act', '')\n        return crime_mapping.get(act_code, 'Unknown')\n    return 'Unknown'\n\ncrime_data['crime_type'] = crime_data.apply(assign_crime_type, axis=1)\ncrime_data = crime_data[crime_data['crime_type'] != 'Unknown']\n\ncrime_data['distance'] = np.sqrt(crime_data['latitude']**2 + crime_data['longitude']**2)\ncrime_data['hour_of_day'] = crime_data['hour'] % 24\ncrime_data['lat_long_dist'] = np.sqrt(crime_data['latitude']**2 + crime_data['longitude']**2)\ncrime_data['hour_latitude'] = crime_data['hour'] * crime_data['latitude']\ncrime_data['hour_longitude'] = crime_data['hour'] * crime_data['longitude']\ncrime_data['dayofweek_hour'] = crime_data['dayofweek'] * crime_data['hour']\ncrime_data['hour_dayofyear'] = crime_data['hour'] * crime_data['dayofyear']\n# Tính trung tâm trung bình của latitude và longitude\nmean_lat = crime_data['latitude'].mean()\nmean_lon = crime_data['longitude'].mean()\ncrime_data['distance_to_center'] = np.sqrt((crime_data['latitude'] - mean_lat)**2 + (crime_data['longitude'] - mean_lon)**2)\n\n# Định nghĩa đặc trưng\nlocation_time_features = ['year', 'month', 'day', 'hour', 'dayofyear', 'weekofyear', \n                         'dayofweek', 'weekday', 'quarter', 'latitude', 'longitude',\n                         'distance','hour_of_day', 'lat_long_dist','hour_latitude', 'hour_longitude',\n                         'dayofweek_hour','hour_dayofyear','distance_to_center' ]\nX = crime_data[location_time_features]\ny = crime_data['crime_type']\n\n# Chia dữ liệu\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)\n\n# Chuẩn hóa dữ liệu\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)\n\n# Kiểm tra\nprint(\"Phân bố nhãn trong y_train:\", Counter(y_train))\nprint(\"Phân bố nhãn trong y_test:\", Counter(y_test))\nprint(\"Kích thước tập huấn luyện:\", X_train.shape)\nprint(\"Kích thước tập kiểm tra:\", X_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T11:31:57.107018Z","iopub.execute_input":"2025-06-19T11:31:57.108044Z","iopub.status.idle":"2025-06-19T11:31:58.479871Z","shell.execute_reply.started":"2025-06-19T11:31:57.108002Z","shell.execute_reply":"2025-06-19T11:31:58.478972Z"}},"outputs":[{"name":"stdout","text":"Phân bố nhãn trong y_train: Counter({'Violence': 554, 'Accident': 478, 'Robbery': 277, 'Kidnapping': 77, 'Gambling': 62, 'Murder': 15})\nPhân bố nhãn trong y_test: Counter({'Violence': 238, 'Accident': 204, 'Robbery': 119, 'Kidnapping': 33, 'Gambling': 26, 'Murder': 7})\nKích thước tập huấn luyện: (1463, 19)\nKích thước tập kiểm tra: (627, 19)\n","output_type":"stream"}],"execution_count":15},{"cell_type":"markdown","source":"# 4. Validation after Pre-processing\n## 4.1. Correlation Matrix","metadata":{}},{"cell_type":"code","source":"# 4. Chọn các thuộc tính quan trọng (dựa trên ma trận tương quan)\n# Tạo ma trận tương quan\nX = crime_data[location_time_features]\ncorrelation_matrix = crime_data[location_time_features].corr()\n\n# Vẽ ma trận tương quan\nplt.figure(figsize=(10, 8))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')\nplt.title('Correlation Matrix')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 4.2. Crime label distribution","metadata":{}},{"cell_type":"code","source":"# Thêm số lượng và phần trăm lên đầu mỗi cột\ndef top_title(ax):\n    for p in ax.patches:\n        height = p.get_height()\n        label = f\"{height} ({height/total*100:.1f}%)\"\n        ax.text(\n            p.get_x() + p.get_width() / 2,  # vị trí x\n            height + 1,                     # vị trí y (trên đầu cột)\n            label, \n            ha='center', va='bottom', \n            fontsize=9, color='black', fontweight='bold'\n        )\n    return ax\n    \nprint('----'*30)\n# 1. Tiêu đề\ndisplay(HTML(\"<span style='color: red; font-weight: bold;font-size:16px'>Distribution of all Crime Label</span>\"))\n# 2. Đếm số lượng từng loại\ncounts = Counter(crime_data['crime_type'])\ntotal = sum(counts.values())\n# 3. Vẽ biểu đồ\nplt.figure(figsize=(8, 5))\nax = sns.countplot(data=crime_data, x='crime_type', order=counts.keys())\n# 4. Thêm số lượng và phần trăm lên đầu mỗi cột\nax = top_title (ax)\n# 5. Giao diện\nplt.title('Distribution of all Crime Label')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\nprint('----'*30)\ndisplay(HTML(\"<span style='color: red; font-weight: bold;font-size:16px'>Distribution of Crime Train dataset</span>\"))\ncounts = Counter(y_train)\ntotal = sum(counts.values())\nplt.figure(figsize = (8,5))\nax = sns.countplot(data = y_train, x = y_train, order=counts.keys())\nax = top_title (ax)\nplt.title('Distribution of Crime Train dataset')\nplt.xticks(rotation = 45, ha='right')\nplt.show()\n\nprint('----'*30)\ndisplay(HTML(\"<span style='color: red; font-weight: bold;font-size:16px'>Distribution of Crime Test dataset</span>\"))\ncounts = Counter(y_test)\ntotal = sum(counts.values())\nplt.figure(figsize = (8,5))\nax = sns.countplot(data = y_test, x = y_test, order=counts.keys())\nax = top_title(ax)\nplt.title('Distribution of Crime Test dataset')\nplt.xticks(rotation = 45, ha='right')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 5. Training\n## 5.1. KNN with PCA and GridSearchCV","metadata":{}},{"cell_type":"code","source":"# Định nghĩa hàm đánh giá mô hình\ndef evaluate_model(y_true, y_pred, model_name):\n    accuracy = accuracy_score(y_true, y_pred)\n    precision, recall, f1, _ = precision_recall_fscore_support(y_true, y_pred, average='weighted')\n    display(HTML(f\"<span style='color: blue; font-weight: bold; font-size:16px'>{model_name} Performance</span>\"))    \n    print(f\"Accuracy: {accuracy:.2f}\")\n    print(f\"Precision: {precision:.2f}\")\n    print(f\"Recall: {recall:.2f}\")\n    print(f\"F1 Score: {f1:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T10:59:18.679907Z","iopub.execute_input":"2025-06-19T10:59:18.680216Z","iopub.status.idle":"2025-06-19T10:59:18.685792Z","shell.execute_reply.started":"2025-06-19T10:59:18.680192Z","shell.execute_reply":"2025-06-19T10:59:18.684862Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"# 1. K-Nearest Neighbor (KNN) với PCA và GridSearchCV\n# Áp dụng PCA để giảm chiều\npca = PCA(n_components=0.95)  # Giữ 95% phương sai\nX_train_pca = pca.fit_transform(X_train_scaled)\nX_test_pca = pca.transform(X_test_scaled)\n\n# Tìm tham số tốt nhất cho KNN\nknn_params = {'n_neighbors': [3, 5, 7, 9], 'weights': ['uniform', 'distance']}\nknn = KNeighborsClassifier()\ngrid_knn = GridSearchCV(knn, knn_params, cv=10, scoring='accuracy')\ngrid_knn.fit(X_train_pca, y_train)\nknn_best = grid_knn.best_estimator_\ny_pred_knn = knn_best.predict(X_test_pca)\nevaluate_model(y_test, y_pred_knn, \"KNN with PCA\")\n# Cross-validation\ncv_scores = cross_val_score(knn, X_train_scaled, y_train, cv=5, scoring='f1_weighted')\nprint(f\"Cross-validation F1-scores: {cv_scores}\")\nprint(f\"Mean CV F1-score: {cv_scores.mean():.2f} (+/- {cv_scores.std() * 2:.2f})\")\n\nprint('----'*20)\ndisplay(HTML(\"<span style='color: red; font-weight: bold;font-size:16px'>Classification detail report</span>\"))\nprint(classification_report(y_test, y_pred_knn))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cm = confusion_matrix(y_test, y_pred_knn)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=crime_mapping.values(), yticklabels=crime_mapping.values())\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('KNN Model - Confusion Matrix')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 5.2. Support Vector Machine (SVM)","metadata":{}},{"cell_type":"code","source":"# Loại bỏ đặc trưng constant\nprint(\"Số lượng đặc trưng trước VarianceThreshold:\", X_train_scaled.shape[1])\nvariance_selector = VarianceThreshold(threshold=0.01)\n\nX_train_scaled_var = variance_selector.fit_transform(X_train_scaled)\nX_test_scaled_var = variance_selector.transform(X_test_scaled)\nprint(\"Số lượng đặc trưng sau VarianceThreshold:\", X_train_scaled_var.shape[1])\n\n# Áp dụng PCA\npca = PCA(n_components=0.98)\nX_train_scaled_pca = pca.fit_transform(X_train_scaled_var)\nX_test_scaled_pca = pca.transform(X_test_scaled_var)\n\n# Mã hóa nhãn\nle = LabelEncoder()\ny_train_encoded = le.fit_transform(y_train)\ny_test_encoded = le.transform(y_test)\n\n# Đếm số lượng mẫu gốc\nclass_counts = Counter(y_train_encoded)\nprint(\"Số lượng mẫu gốc của từng lớp:\", dict(class_counts))\n\n# Pipeline\nsampling_strategy_over = {cls: int(count * 1.1) for cls, count in class_counts.items()}\nsampling_strategy_under = {cls: int(max(count * 0.95, min(class_counts.values()))) for cls, count in class_counts.items()}\n\npipeline = Pipeline([\n    ('over', RandomOverSampler(sampling_strategy=sampling_strategy_over, random_state=42)),\n    ('under', RandomUnderSampler(sampling_strategy=sampling_strategy_under, random_state=42)),\n    ('svm', SVC(random_state=42))\n])\nsvm_params = {'svm__C': [10, 50, 100], 'svm__kernel': ['linear', 'rbf'], 'svm__gamma': ['auto'], 'svm__class_weight': [None]}\ngrid_svm = GridSearchCV(pipeline, svm_params, cv=10, scoring='f1_macro')\ngrid_svm.fit(X_train_scaled_pca, y_train_encoded)\nsvm_best = grid_svm.best_estimator_\ny_pred_svm_encoded = svm_best.predict(X_test_scaled_pca)\n\n# Giải mã dự đoán\ny_pred_svm = le.inverse_transform(y_pred_svm_encoded)\n\nprint(f\"Tham số tốt nhất cho SVM: {grid_svm.best_params_}\")\n\n# Đánh giá\nevaluate_model(y_test, y_pred_svm, \"SVM with PCA, Variance, and New Feature\")\n\n\n# Cross-validation\ncv_scores = cross_val_score(svm_best, X_train_scaled_pca, y_train_encoded, cv=5, scoring='f1_weighted')\nprint(f\"Cross-validation F1-scores: {cv_scores}\")\nprint(f\"Mean CV F1-score: {cv_scores.mean():.2f} (+/- {cv_scores.std() * 2:.2f})\")\n\nprint('----'*20)\ndisplay(HTML(\"<span style='color: red; font-weight: bold;font-size:16px'>SVM Model - Classification detail report</span>\"))\nprint(classification_report(y_test, y_pred_svm))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cm = confusion_matrix(y_test, y_pred_svm)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=crime_mapping.values(), yticklabels=crime_mapping.values())\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('SVM Model - Confusion Matrix')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## 5.3. Random Forest","metadata":{}},{"cell_type":"code","source":"# 3. Random Forest\nrf = RandomForestClassifier(max_depth=10, random_state=20)\nrf.fit(X_train, y_train)\ny_pred_train = rf.predict(X_train)\ny_pred_test = rf.predict(X_test)\n\nevaluate_model(y_test, y_pred_test, \"Random Forest\")\n\ny_pred_rf = rf.predict(X_test)\n\n# Cross-validation\ncv_scores = cross_val_score(rf, X_train_scaled, y_train, cv=5, scoring='f1_weighted')\nprint(f\"Cross-validation F1-scores: {cv_scores}\")\nprint(f\"Mean CV F1-score: {cv_scores.mean():.2f} (+/- {cv_scores.std() * 2:.2f})\")\n\nprint('----'*20)\ndisplay(HTML(\"<span style='color: red; font-weight: bold;font-size:16px'>Random Forest Model - Classification detail report</span>\"))\nprint(classification_report(y_test, y_pred_test))","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cm = confusion_matrix(y_test, y_pred_rf)\nplt.figure(figsize=(8, 6))\nsns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=crime_mapping.values(), yticklabels=crime_mapping.values())\nplt.xlabel('Predicted')\nplt.ylabel('True')\nplt.title('Random Forest Model - Confusion Matrix')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## KMeans Clustering","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport plotly.io as pio\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n# Cấu hình Plotly cho Kaggle ngay từ đầu\npio.renderers.default = 'kaggle'\n\n# Giả sử crime_data đã được tải từ file CSV\n# crime_data = pd.read_csv('/kaggle/input/crime-drone-india-2018/Crime Drone India.csv')\n\n# Kiểm tra và xử lý giá trị thiếu\nprint(crime_data[['latitude', 'longitude']].isnull().sum())\n\n# Chuẩn hóa dữ liệu\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Chọn số cụm tối ưu bằng Silhouette Score\nsilhouette_scores = []\nrange_n_clusters = range(2, 7)\nfor n_clusters in range_n_clusters:\n    kmeans = KMeans(n_clusters=n_clusters, n_init=10, random_state=42)\n    kmeans.fit(X_scaled)\n    score = silhouette_score(X_scaled, kmeans.labels_)\n    silhouette_scores.append(score)\n\n# Vẽ biểu đồ Silhouette Score\nplt.figure(figsize=(8, 5))\nplt.plot(range_n_clusters, silhouette_scores, marker='o')\nplt.title('Silhouette Score for Different Numbers of Clusters')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Silhouette Score')\nplt.grid(True)\nplt.show()\n\n# Chọn số cụm tối ưu\noptimal_clusters = range_n_clusters[np.argmax(silhouette_scores)]\nprint(f\"Số cụm tối ưu: {optimal_clusters}\")\n\n# Áp dụng K-Means với số cụm tối ưu\noptimal_clusters = 6\nkmeans = KMeans(n_clusters=optimal_clusters, n_init=10, random_state=42)\nkmeans.fit(X_scaled)\ncrime_data['cluster'] = kmeans.labels_\n\n# Tính trung tâm cụm\ncluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)\ncluster_centers_df = pd.DataFrame(cluster_centers, columns=location_time_features)\n\n# Phân tích điểm nóng\nprint(\"\\nTọa độ trung tâm của các cụm (điểm nóng tiềm năng):\")\nfor i in range(optimal_clusters):\n    center = cluster_centers_df.iloc[i]\n    print(f\"Cụm {i}: Latitude={center['latitude']:.2f}, Longitude={center['longitude']:.2f}, \"\n          f\"Hour={center['hour']:.2f}, Dayofyear={center['dayofyear']:.2f}\")\n\n# Đếm số lượng tội phạm trong mỗi cụm\ncluster_counts = crime_data['cluster'].value_counts()\nprint(\"\\nSố lượng tội phạm trong mỗi cụm:\")\nprint(cluster_counts)\n\n# Gán crime_count dựa trên số lượng tội phạm của cụm\ncrime_data['crime_count'] = crime_data['cluster'].map(cluster_counts)\n\n# Trực quan hóa các cụm trên bản đồ với màu sắc từ vàng sang đỏ\nfig = px.scatter_mapbox(crime_data, lat=\"latitude\", lon=\"longitude\", \n                        color=\"crime_count\", \n                        size=\"crime_count\", size_max=20,  \n                        color_continuous_scale=px.colors.sequential.YlOrRd, \n                        range_color=[crime_data['crime_count'].min(), crime_data['crime_count'].max()],  \n                        color_continuous_midpoint=None,  # Đảm bảo gradient liên tục\n                        zoom=11, height=720, width=1280)\nfig.update_layout(mapbox_style=\"open-street-map\",\n                  coloraxis_colorbar_title=\"Số lượng tội phạm\")  \n\n# Lưu bản đồ dưới dạng HTML\nfig.write_html(\"crime_clusters.html\")","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score, classification_report, accuracy_score, precision_recall_fscore_support\nfrom scipy.optimize import linear_sum_assignment\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom scipy.stats import mode\nfrom IPython.display import display, HTML\nfrom collections import Counter\nimport plotly.io as pio\n\n# Cấu hình Plotly cho Kaggle\npio.renderers.default = 'kaggle'\n\n# Giả định X, y, X_train, X_test, y_train, y_test, crime_data, location_time_features đã được định nghĩa từ session tiền xử lý\n\n# Mã hóa nhãn cho toàn bộ dữ liệu\nle = LabelEncoder()\ny_encoded = le.fit_transform(y)\n\n# Chuẩn hóa toàn bộ dữ liệu để gán nhãn cụm\nX_scaled = scaler.transform(X)\n\n# Áp dụng PCA với n_components=0.95\npca = PCA(n_components=0.95)\nX_scaled_pca = pca.fit_transform(X_scaled)\n\n# Chọn số cụm tối ưu bằng Silhouette Score\nsilhouette_scores = []\nrange_n_clusters = range(2, 16)\nfor n_clusters in range_n_clusters:\n    kmeans = KMeans(n_clusters=n_clusters, n_init=10, random_state=42)\n    kmeans.fit(X_scaled_pca)\n    score = silhouette_score(X_scaled_pca, kmeans.labels_)\n    silhouette_scores.append(score)\n\noptimal_clusters = range_n_clusters[np.argmax(silhouette_scores)]\nprint(f\"Số cụm tối ưu từ Silhouette Score: {optimal_clusters}\")\n\n# Phương pháp Elbow\ninertia = []\nfor n_clusters in range_n_clusters:\n    kmeans = KMeans(n_clusters=n_clusters, n_init=10, random_state=42)\n    kmeans.fit(X_scaled_pca)\n    inertia.append(kmeans.inertia_)\n\nplt.figure(figsize=(8, 5))\nplt.plot(range_n_clusters, inertia, marker='o')\nplt.title('Elbow Method for Optimal Number of Clusters')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia')\nplt.grid(True)\nplt.show()\n\n# Tạo sample_weight dựa trên dữ liệu toàn cục cho từng mẫu\nclass_counts = Counter(y_encoded)\nclass_weights = {label: 1 / (count + 1e-5) for label, count in class_counts.items()}\nsample_weight = np.array([class_weights.get(label, 1.0) * 15 if class_counts[label] < 30 else class_weights.get(label, 1.0) for label in y_encoded])\n\n# Áp dụng KMeans với số cụm tối ưu và trọng số tinh chỉnh\nkmeans = KMeans(n_clusters=optimal_clusters, n_init=10, random_state=42)\nkmeans.fit(X_scaled_pca, sample_weight=sample_weight)\n\n# Dự đoán nhãn cụm cho toàn bộ dữ liệu\nall_clusters = kmeans.predict(X_scaled_pca)\ncrime_data['cluster'] = all_clusters\n\n# Dự đoán cho tập kiểm tra\nX_test_scaled_pca = pca.transform(X_test_scaled)\ny_pred_kmeans = kmeans.predict(X_test_scaled_pca)\n\n# Hàm ánh xạ nhãn với ưu tiên lớp hiếm\ndef map_cluster_labels(y_true, y_pred, y_train, X_train_scaled):\n    train_clusters = kmeans.predict(pca.transform(X_train_scaled))\n    cluster_to_label = {}\n    for cluster_id in range(optimal_clusters):\n        mask = (train_clusters == cluster_id)\n        if mask.sum() > 0:\n            most_common_label = mode(y_train[mask])[0].item()\n            rare_labels = [le.transform([label])[0] for label, count in Counter(y).items() if count < 30]\n            for rare_label in rare_labels:\n                if np.any(y_train[mask] == rare_label):\n                    cluster_to_label[cluster_id] = rare_label\n                    break\n            else:\n                cluster_to_label[cluster_id] = most_common_label\n    default_label = mode(y_train).mode.item()\n    y_pred_mapped_encoded = np.array([cluster_to_label.get(pred, default_label) for pred in y_pred])\n    return y_pred_mapped_encoded\n\n# Ánh xạ nhãn\ny_pred_mapped_encoded = map_cluster_labels(y_test, y_pred_kmeans, le.transform(y_train), X_train_scaled)\ny_pred_mapped = le.inverse_transform(y_pred_mapped_encoded)\n\n# Đánh giá mô hình với zero_division=1\nprint(\"K-Means Clustering (Optimized with Adjusted Weights) Performance\")\nprint(f\"Accuracy: {accuracy_score(le.transform(y_test), y_pred_mapped_encoded):.2f}\")\nprint(f\"Precision: {precision_recall_fscore_support(le.transform(y_test), y_pred_mapped_encoded, average='weighted', zero_division=1)[0]:.2f}\")\nprint(f\"Recall: {precision_recall_fscore_support(le.transform(y_test), y_pred_mapped_encoded, average='weighted', zero_division=1)[1]:.2f}\")\nprint(f\"F1 Score: {precision_recall_fscore_support(le.transform(y_test), y_pred_mapped_encoded, average='weighted', zero_division=1)[2]:.2f}\")\n\n# In báo cáo chi tiết với zero_division=1\nprint('----'*20)\ndisplay(HTML(\"<span style='color: red; font-weight: bold;font-size:16px'>K-Means Model - Classification detail report</span>\"))\nprint(classification_report(le.transform(y_test), y_pred_mapped_encoded, target_names=le.classes_, zero_division=1))\n\n# Tính trung tâm cụm\ncluster_centers = pca.inverse_transform(kmeans.cluster_centers_)\ncluster_centers_df = pd.DataFrame(scaler.inverse_transform(cluster_centers), columns=location_time_features)\n\n# Phân tích điểm nóng\nprint(\"\\nTọa độ trung tâm của các cụm (điểm nóng tiềm năng):\")\nfor i in range(optimal_clusters):\n    center = cluster_centers_df.iloc[i]\n    print(f\"Cụm {i}: Latitude={center['latitude']:.2f}, Longitude={center['longitude']:.2f}, \"\n          f\"Hour={center['hour']:.2f}, Dayofyear={center['dayofyear']:.2f}\")\n    cluster_data = crime_data[crime_data['cluster'] == i]\n    crime_type_counts = cluster_data['crime_type'].value_counts()\n    # print(f\"Số lượng tội phạm theo loại trong Cụm {i}:\")\n    # print(crime_type_counts)\n\n# Đếm tổng số lượng tội phạm\ncluster_counts = crime_data['cluster'].value_counts()\nprint(\"\\nTổng số lượng tội phạm trong mỗi cụm:\")\nprint(cluster_counts)\n\n# Gán crime_count và xử lý giá trị nan\ncrime_data['crime_count'] = crime_data['cluster'].map(cluster_counts).fillna(0)\n\n# Trực quan hóa\nfig = px.scatter_mapbox(crime_data, lat=\"latitude\", lon=\"longitude\", \n                        color=\"crime_count\",\n                        size=\"crime_count\", size_max=20,\n                        color_continuous_scale=px.colors.sequential.YlOrRd,\n                        range_color=[crime_data['crime_count'].min(), crime_data['crime_count'].max()],\n                        color_continuous_midpoint=None,\n                        zoom=11, height=720, width=1280)\nfig.update_layout(mapbox_style=\"open-street-map\",\n                  coloraxis_colorbar_title=\"Số lượng tội phạm\")\nfig.write_html(\"crime_clusters_with_classification.html\")\n\n# Vẽ biểu đồ Silhouette Score\nplt.figure(figsize=(8, 5))\nplt.plot(range_n_clusters, silhouette_scores, marker='o')\nplt.title('Silhouette Score for Optimal Number of Clusters')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Silhouette Score')\nplt.grid(True)\nplt.axvline(x=optimal_clusters, color='r', linestyle='--', label=f'Optimal Clusters = {optimal_clusters}')\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T11:41:03.951686Z","iopub.execute_input":"2025-06-19T11:41:03.952368Z","iopub.status.idle":"2025-06-19T11:41:06.420612Z","shell.execute_reply.started":"2025-06-19T11:41:03.952341Z","shell.execute_reply":"2025-06-19T11:41:06.419558Z"}},"outputs":[{"name":"stdout","text":"Số cụm tối ưu từ Silhouette Score: 13\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"K-Means Clustering (Optimized with Adjusted Weights) Performance\nAccuracy: 0.48\nPrecision: 0.65\nRecall: 0.48\nF1 Score: 0.41\n--------------------------------------------------------------------------------\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.HTML object>","text/html":"<span style='color: red; font-weight: bold;font-size:16px'>K-Means Model - Classification detail report</span>"},"metadata":{}},{"name":"stdout","text":"              precision    recall  f1-score   support\n\n    Accident       0.43      0.82      0.56       204\n    Gambling       1.00      0.00      0.00        26\n  Kidnapping       1.00      0.00      0.00        33\n      Murder       0.70      1.00      0.82         7\n     Robbery       1.00      0.03      0.07       119\n    Violence       0.57      0.53      0.54       238\n\n    accuracy                           0.48       627\n   macro avg       0.78      0.40      0.33       627\nweighted avg       0.65      0.48      0.41       627\n\n\nTọa độ trung tâm của các cụm (điểm nóng tiềm năng):\nCụm 0: Latitude=22.72, Longitude=75.88, Hour=12.30, Dayofyear=64.87\nCụm 1: Latitude=22.54, Longitude=75.75, Hour=22.07, Dayofyear=63.39\nCụm 2: Latitude=22.56, Longitude=75.87, Hour=17.29, Dayofyear=61.86\nCụm 3: Latitude=22.69, Longitude=75.83, Hour=16.94, Dayofyear=59.03\nCụm 4: Latitude=22.73, Longitude=75.88, Hour=21.20, Dayofyear=62.09\nCụm 5: Latitude=22.72, Longitude=75.86, Hour=14.93, Dayofyear=60.75\nCụm 6: Latitude=22.66, Longitude=75.91, Hour=15.99, Dayofyear=3.36\nCụm 7: Latitude=22.74, Longitude=75.88, Hour=10.95, Dayofyear=58.87\nCụm 8: Latitude=22.73, Longitude=75.87, Hour=19.32, Dayofyear=65.06\nCụm 9: Latitude=22.57, Longitude=75.76, Hour=11.32, Dayofyear=61.60\nCụm 10: Latitude=22.73, Longitude=75.87, Hour=21.35, Dayofyear=58.94\nCụm 11: Latitude=22.72, Longitude=75.86, Hour=1.22, Dayofyear=61.05\nCụm 12: Latitude=22.80, Longitude=75.56, Hour=15.88, Dayofyear=61.06\n\nTổng số lượng tội phạm trong mỗi cụm:\ncluster\n8     385\n5     363\n0     286\n4     264\n3     176\n10    165\n11    165\n7     132\n12     55\n9      55\n1      22\n6      11\n2      11\nName: count, dtype: int64\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":26},{"cell_type":"markdown","source":"## Phân cụm tổn thể","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport plotly.io as pio\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n# Cấu hình Plotly cho Kaggle\npio.renderers.default = 'kaggle'\n\n# Chuẩn hóa dữ liệu\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\n# Chọn số cụm tối ưu bằng Silhouette Score\nsilhouette_scores = []\nrange_n_clusters = range(2, 7)  # Giới hạn từ 2 đến 6 để thử nghiệm\nfor n_clusters in range_n_clusters:\n    kmeans = KMeans(n_clusters=n_clusters, n_init=10, random_state=42)\n    kmeans.fit(X_scaled)\n    score = silhouette_score(X_scaled, kmeans.labels_)\n    silhouette_scores.append(score)\n\n# Vẽ biểu đồ Silhouette Score\nplt.figure(figsize=(8, 5))\nplt.plot(range_n_clusters, silhouette_scores, marker='o')\nplt.title('Silhouette Score for Different Numbers of Clusters')\nplt.xlabel('Number of Clusters')\nplt.ylabel('Silhouette Score')\nplt.grid(True)\nplt.show()\n\n# Chọn số cụm tối ưu\noptimal_clusters = range_n_clusters[np.argmax(silhouette_scores)]\nprint(f\"Số cụm tối ưu từ Silhouette Score: {optimal_clusters}\")\n\n# Áp dụng K-Means với số cụm tối ưu\nkmeans = KMeans(n_clusters=optimal_clusters, n_init=10, random_state=42)\nkmeans.fit(X_scaled)\ncrime_data['cluster'] = kmeans.labels_\n\n# Tính trung tâm cụm\ncluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)\ncluster_centers_df = pd.DataFrame(cluster_centers, columns=location_time_features)\n\n# Phân tích điểm nóng\nprint(\"\\nTọa độ trung tâm của các cụm (điểm nóng tiềm năng):\")\nfor i in range(optimal_clusters):\n    center = cluster_centers_df.iloc[i]\n    print(f\"Cụm {i}: Latitude={center['latitude']:.2f}, Longitude={center['longitude']:.2f}, \"\n          f\"Hour={center['hour']:.2f}, Dayofyear={center['dayofyear']:.2f}\")\n    cluster_data = crime_data[crime_data['cluster'] == i]\n    crime_type_counts = cluster_data['crime_type'].value_counts()\n    # print(f\"Số lượng tội phạm theo loại trong Cụm {i}:\")\n    # print(crime_type_counts)\n\n# Đếm số lượng tội phạm trong mỗi cụm\ncluster_counts = crime_data['cluster'].value_counts()\nprint(\"\\nSố lượng tội phạm trong mỗi cụm:\")\nprint(cluster_counts)\n\n# Gán crime_count dựa trên số lượng tội phạm của cụm\ncrime_data['crime_count'] = crime_data['cluster'].map(cluster_counts)\n\n# Trực quan hóa các cụm trên bản đồ với màu sắc từ vàng sang đỏ\nfig = px.scatter_mapbox(crime_data, lat=\"latitude\", lon=\"longitude\", \n                        color=\"crime_count\", \n                        size=\"crime_count\", size_max=20,  \n                        color_continuous_scale=px.colors.sequential.YlOrRd, \n                        range_color=[crime_data['crime_count'].min(), crime_data['crime_count'].max()],  \n                        color_continuous_midpoint=None,  # Đảm bảo gradient liên tục\n                        zoom=11, height=720, width=1280,\n                        hover_data=[\"crime_type\"])  # Thêm thông tin hover\nfig.update_layout(mapbox_style=\"open-street-map\",\n                  coloraxis_colorbar_title=\"Số lượng tội phạm\")  \n\n# Lưu bản đồ dưới dạng HTML\nfig.write_html(\"crime_clusters.html\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T11:53:52.696088Z","iopub.execute_input":"2025-06-19T11:53:52.696432Z","iopub.status.idle":"2025-06-19T11:53:53.642953Z","shell.execute_reply.started":"2025-06-19T11:53:52.696410Z","shell.execute_reply":"2025-06-19T11:53:53.642011Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 800x500 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"Số cụm tối ưu từ Silhouette Score: 6\n\nTọa độ trung tâm của các cụm (điểm nóng tiềm năng):\nCụm 0: Latitude=22.72, Longitude=75.86, Hour=17.20, Dayofyear=59.00\nCụm 1: Latitude=22.71, Longitude=75.86, Hour=3.63, Dayofyear=61.54\nCụm 2: Latitude=22.72, Longitude=75.87, Hour=16.88, Dayofyear=65.07\nCụm 3: Latitude=22.72, Longitude=75.87, Hour=17.41, Dayofyear=61.48\nCụm 4: Latitude=22.66, Longitude=75.90, Hour=16.00, Dayofyear=3.00\nCụm 5: Latitude=22.68, Longitude=75.66, Hour=16.56, Dayofyear=62.00\n\nSố lượng tội phạm trong mỗi cụm:\ncluster\n2    649\n3    616\n0    451\n1    264\n5     99\n4     11\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":28},{"cell_type":"markdown","source":"# Phân cụm theo loại tội phạm","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\nimport plotly.io as pio\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n\n# Cấu hình Plotly cho Kaggle\npio.renderers.default = 'kaggle'\n\n# Giả sử crime_data, location_time_features đã được định nghĩa từ session tiền xử lý\n\n# Phân cụm và trực quan hóa theo từng loại tội phạm\ncrime_types = crime_data['crime_type'].unique()\n\nfor crime_type in crime_types:\n    # Lọc chỉ mục của dữ liệu theo loại tội phạm\n    mask = crime_data['crime_type'] == crime_type\n    crime_data_filtered = crime_data[mask]\n    if len(crime_data_filtered) < 2:  # Kiểm tra số mẫu tối thiểu để phân cụm\n        print(f\"Không đủ dữ liệu để phân cụm cho {crime_type}\")\n        continue\n    \n    # Chuẩn hóa dữ liệu cho loại tội phạm này\n    X_filtered = crime_data_filtered[location_time_features]\n    scaler = StandardScaler()  # Tạo scaler mới cho từng loại để tránh lỗi từ scaler toàn cục\n    X_filtered_scaled = scaler.fit_transform(X_filtered)\n\n    # Chọn số cụm tối ưu bằng Silhouette Score\n    silhouette_scores = []\n    range_n_clusters = range(2, min(6, len(crime_data_filtered) // 10) + 1)  # Giới hạn số cụm dựa trên số mẫu\n    if not range_n_clusters:\n        print(f\"Không đủ dữ liệu để phân cụm cho {crime_type}\")\n        continue\n    \n    for n_clusters in range_n_clusters:\n        kmeans = KMeans(n_clusters=n_clusters, n_init=10, random_state=42)\n        kmeans.fit(X_filtered_scaled)\n        score = silhouette_score(X_filtered_scaled, kmeans.labels_)\n        silhouette_scores.append(score)\n\n    optimal_clusters = range_n_clusters[np.argmax(silhouette_scores)]\n    print(f\"Số cụm tối ưu cho {crime_type}: {optimal_clusters}\")\n\n    # Áp dụng K-Means\n    kmeans = KMeans(n_clusters=optimal_clusters, n_init=10, random_state=42)\n    kmeans.fit(X_filtered_scaled)\n    # Gán cluster trực tiếp vào crime_data bằng .loc\n    crime_data.loc[mask, 'cluster'] = kmeans.labels_\n\n    # Tính trung tâm cụm\n    cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)\n    cluster_centers_df = pd.DataFrame(cluster_centers, columns=location_time_features)\n\n    # Đếm số lượng tội phạm trong mỗi cụm và gán bằng .loc\n    cluster_counts = crime_data_filtered['cluster'].value_counts()\n    crime_data.loc[mask, 'crime_count'] = crime_data_filtered['cluster'].map(cluster_counts)\n\n    # Trực quan hóa\n    fig = px.scatter_mapbox(crime_data[mask], lat=\"latitude\", lon=\"longitude\", \n                            color=\"crime_count\", \n                            size=\"crime_count\", size_max=20,  \n                            color_continuous_scale=px.colors.sequential.YlOrRd, \n                            range_color=[crime_data.loc[mask, 'crime_count'].min(), crime_data.loc[mask, 'crime_count'].max()],  \n                            color_continuous_midpoint=None,  \n                            zoom=11, height=720, width=1280,\n                            title=f\"Hotspots for {crime_type}\",\n                            hover_data=[\"crime_type\"])\n    fig.update_layout(mapbox_style=\"open-street-map\",\n                      coloraxis_colorbar_title=\"Số lượng tội phạm\")  \n    fig.write_html(f\"crime_clusters_{crime_type.replace(' ', '_')}.html\")\n\n    # In thông tin điểm nóng\n    print(f\"\\nTọa độ trung tâm của các cụm cho {crime_type}:\")\n    for i in range(optimal_clusters):\n        center = cluster_centers_df.iloc[i]\n        print(f\"Cụm {i}: Latitude={center['latitude']:.2f}, Longitude={center['longitude']:.2f}, \"\n              f\"Hour={center['hour']:.2f}, Dayofyear={center['dayofyear']:.2f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-19T11:59:54.994261Z","iopub.execute_input":"2025-06-19T11:59:54.994929Z","iopub.status.idle":"2025-06-19T11:59:56.020975Z","shell.execute_reply.started":"2025-06-19T11:59:54.994899Z","shell.execute_reply":"2025-06-19T11:59:56.020103Z"}},"outputs":[{"name":"stdout","text":"Số cụm tối ưu cho Robbery: 4\n\nTọa độ trung tâm của các cụm cho Robbery:\nCụm 0: Latitude=22.72, Longitude=75.86, Hour=16.80, Dayofyear=62.10\nCụm 1: Latitude=22.71, Longitude=75.86, Hour=0.50, Dayofyear=59.25\nCụm 2: Latitude=22.85, Longitude=75.54, Hour=12.00, Dayofyear=60.00\nCụm 3: Latitude=22.66, Longitude=75.90, Hour=16.00, Dayofyear=3.00\nSố cụm tối ưu cho Accident: 6\n\nTọa độ trung tâm của các cụm cho Accident:\nCụm 0: Latitude=22.74, Longitude=75.89, Hour=20.00, Dayofyear=65.08\nCụm 1: Latitude=22.72, Longitude=75.88, Hour=16.53, Dayofyear=61.82\nCụm 2: Latitude=22.73, Longitude=75.86, Hour=13.89, Dayofyear=59.00\nCụm 3: Latitude=22.72, Longitude=75.87, Hour=12.07, Dayofyear=64.71\nCụm 4: Latitude=22.68, Longitude=75.67, Hour=17.00, Dayofyear=60.80\nCụm 5: Latitude=22.62, Longitude=75.80, Hour=5.75, Dayofyear=62.75\nSố cụm tối ưu cho Violence: 5\n\nTọa độ trung tâm của các cụm cho Violence:\nCụm 0: Latitude=22.71, Longitude=75.85, Hour=17.70, Dayofyear=59.00\nCụm 1: Latitude=22.73, Longitude=75.88, Hour=1.80, Dayofyear=62.60\nCụm 2: Latitude=22.85, Longitude=75.54, Hour=18.00, Dayofyear=64.00\nCụm 3: Latitude=22.72, Longitude=75.87, Hour=17.05, Dayofyear=65.26\nCụm 4: Latitude=22.71, Longitude=75.85, Hour=17.95, Dayofyear=61.84\nSố cụm tối ưu cho Kidnapping: 6\n\nTọa độ trung tâm của các cụm cho Kidnapping:\nCụm 0: Latitude=22.73, Longitude=75.91, Hour=16.50, Dayofyear=65.50\nCụm 1: Latitude=22.73, Longitude=75.89, Hour=10.50, Dayofyear=59.00\nCụm 2: Latitude=22.75, Longitude=75.89, Hour=16.67, Dayofyear=60.00\nCụm 3: Latitude=22.73, Longitude=75.80, Hour=14.00, Dayofyear=62.00\nCụm 4: Latitude=22.74, Longitude=75.91, Hour=23.00, Dayofyear=62.00\nCụm 5: Latitude=22.71, Longitude=75.83, Hour=19.00, Dayofyear=66.00\nSố cụm tối ưu cho Gambling: 6\n\nTọa độ trung tâm của các cụm cho Gambling:\nCụm 0: Latitude=22.68, Longitude=75.83, Hour=18.00, Dayofyear=59.00\nCụm 1: Latitude=22.75, Longitude=75.88, Hour=22.00, Dayofyear=59.00\nCụm 2: Latitude=22.74, Longitude=75.90, Hour=19.00, Dayofyear=64.00\nCụm 3: Latitude=22.71, Longitude=75.82, Hour=15.00, Dayofyear=60.00\nCụm 4: Latitude=22.73, Longitude=75.85, Hour=22.00, Dayofyear=59.00\nCụm 5: Latitude=22.69, Longitude=75.83, Hour=15.00, Dayofyear=59.00\nSố cụm tối ưu cho Murder: 2\n\nTọa độ trung tâm của các cụm cho Murder:\nCụm 0: Latitude=22.54, Longitude=75.91, Hour=17.00, Dayofyear=63.00\nCụm 1: Latitude=22.53, Longitude=75.77, Hour=22.00, Dayofyear=64.00\n","output_type":"stream"}],"execution_count":30}]}